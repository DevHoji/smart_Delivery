generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  password        String
  role            Role       @default(USER)
  image           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  agentDeliveries Delivery[] @relation("Agent")
  sentDeliveries  Delivery[] @relation("Sender")
  locations       Location[] @relation("AgentLocation")
  messages        Message[]  @relation("MessageSender")
}

model Delivery {
  id                 String         @id @default(cuid())
  trackingId         String?        @unique @default(cuid())
  senderId           String
  agentId            String?
  status             DeliveryStatus @default(PENDING)
  origin             String
  destination        String
  pickupAddress      String?
  deliveryAddress    String?
  pickupLat          Float?
  pickupLng          Float?
  deliveryLat        Float?
  deliveryLng        Float?
  packageInfo        String?
  packageDescription String?
  weight             Float?
  dimensions         String?
  notes              String?
  estimatedDelivery  DateTime?
  imageUrl           String?
  description        String?
  qrCode             String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  agent              User?          @relation("Agent", fields: [agentId], references: [id])
  sender             User           @relation("Sender", fields: [senderId], references: [id])
  locations          Location[]
  messages           Message[]
  statusUpdates      StatusUpdate[]
}

model StatusUpdate {
  id         String         @id @default(cuid())
  status     DeliveryStatus
  timestamp  DateTime       @default(now())
  notes      String?
  deliveryId String
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  deliveryId String
  createdAt  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
}

model Location {
  id         String   @id @default(cuid())
  latitude   Float
  longitude  Float
  agentId    String
  deliveryId String
  timestamp  DateTime @default(now())
  agent      User     @relation("AgentLocation", fields: [agentId], references: [id])
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}
